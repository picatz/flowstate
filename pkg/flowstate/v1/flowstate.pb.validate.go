// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flowstate/v1/flowstate.proto

package flowstatev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Workflow with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Workflow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Workflow with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkflowMultiError, or nil
// if none found.
func (m *Workflow) ValidateAll() error {
	return m.validate(true)
}

func (m *Workflow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetSteps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowValidationError{
					field:  fmt.Sprintf("Steps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetInputs()))
		i := 0
		for key := range m.GetInputs() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetInputs()[key]
			_ = val

			// no validation rules for Inputs[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, WorkflowValidationError{
							field:  fmt.Sprintf("Inputs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, WorkflowValidationError{
							field:  fmt.Sprintf("Inputs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return WorkflowValidationError{
						field:  fmt.Sprintf("Inputs[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Labels

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return WorkflowMultiError(errors)
	}

	return nil
}

// WorkflowMultiError is an error wrapping multiple validation errors returned
// by Workflow.ValidateAll() if the designated constraints aren't met.
type WorkflowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowMultiError) AllErrors() []error { return m }

// WorkflowValidationError is the validation error returned by
// Workflow.Validate if the designated constraints aren't met.
type WorkflowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowValidationError) ErrorName() string { return "WorkflowValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowValidationError{}

// Validate checks the field values on Node with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Node with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NodeMultiError, or nil if none found.
func (m *Node) ValidateAll() error {
	return m.validate(true)
}

func (m *Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch v := m.Kind.(type) {
	case *Node_Task:
		if v == nil {
			err := NodeValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "Task",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  "Task",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return NodeMultiError(errors)
	}

	return nil
}

// NodeMultiError is an error wrapping multiple validation errors returned by
// Node.ValidateAll() if the designated constraints aren't met.
type NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMultiError) AllErrors() []error { return m }

// NodeValidationError is the validation error returned by Node.Validate if the
// designated constraints aren't met.
type NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeValidationError) ErrorName() string { return "NodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeValidationError{}

// Validate checks the field values on Value with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Value) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Value with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ValueMultiError, or nil if none found.
func (m *Value) ValidateAll() error {
	return m.validate(true)
}

func (m *Value) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Kind.(type) {
	case *Value_Expr:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExpr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "Expr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "Expr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Expr",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Literal:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLiteral()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "Literal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "Literal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLiteral()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Literal",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Error_:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ValueMultiError(errors)
	}

	return nil
}

// ValueMultiError is an error wrapping multiple validation errors returned by
// Value.ValidateAll() if the designated constraints aren't met.
type ValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValueMultiError) AllErrors() []error { return m }

// ValueValidationError is the validation error returned by Value.Validate if
// the designated constraints aren't met.
type ValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValueValidationError) ErrorName() string { return "ValueValidationError" }

// Error satisfies the builtin error interface
func (e ValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValueValidationError{}

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Task) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TaskMultiError, or nil if none found.
func (m *Task) ValidateAll() error {
	return m.validate(true)
}

func (m *Task) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	{
		sorted_keys := make([]string, len(m.GetInputs()))
		i := 0
		for key := range m.GetInputs() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetInputs()[key]
			_ = val

			// no validation rules for Inputs[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, TaskValidationError{
							field:  fmt.Sprintf("Inputs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, TaskValidationError{
							field:  fmt.Sprintf("Inputs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return TaskValidationError{
						field:  fmt.Sprintf("Inputs[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return TaskMultiError(errors)
	}

	return nil
}

// TaskMultiError is an error wrapping multiple validation errors returned by
// Task.ValidateAll() if the designated constraints aren't met.
type TaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskMultiError) AllErrors() []error { return m }

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}

// Validate checks the field values on RunRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunRequestMultiError, or
// nil if none found.
func (m *RunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunRequestValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunRequestValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunRequestValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RunRequestMultiError(errors)
	}

	return nil
}

// RunRequestMultiError is an error wrapping multiple validation errors
// returned by RunRequest.ValidateAll() if the designated constraints aren't met.
type RunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunRequestMultiError) AllErrors() []error { return m }

// RunRequestValidationError is the validation error returned by
// RunRequest.Validate if the designated constraints aren't met.
type RunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunRequestValidationError) ErrorName() string { return "RunRequestValidationError" }

// Error satisfies the builtin error interface
func (e RunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunRequestValidationError{}

// Validate checks the field values on RunResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunResponseMultiError, or
// nil if none found.
func (m *RunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowId

	// no validation rules for RunId

	// no validation rules for Status

	switch v := m.Kind.(type) {
	case *RunResponse_Error_:
		if v == nil {
			err := RunResponseValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RunResponse_Outputs:
		if v == nil {
			err := RunResponseValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOutputs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunResponseValidationError{
						field:  "Outputs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunResponseValidationError{
						field:  "Outputs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOutputs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunResponseValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RunResponseMultiError(errors)
	}

	return nil
}

// RunResponseMultiError is an error wrapping multiple validation errors
// returned by RunResponse.ValidateAll() if the designated constraints aren't met.
type RunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunResponseMultiError) AllErrors() []error { return m }

// RunResponseValidationError is the validation error returned by
// RunResponse.Validate if the designated constraints aren't met.
type RunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunResponseValidationError) ErrorName() string { return "RunResponseValidationError" }

// Error satisfies the builtin error interface
func (e RunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunResponseValidationError{}

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRequestMultiError, or
// nil if none found.
func (m *GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowId

	if m.RunId != nil {
		// no validation rules for RunId
	}

	if len(errors) > 0 {
		return GetRequestMultiError(errors)
	}

	return nil
}

// GetRequestMultiError is an error wrapping multiple validation errors
// returned by GetRequest.ValidateAll() if the designated constraints aren't met.
type GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestMultiError) AllErrors() []error { return m }

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetResponseMultiError, or
// nil if none found.
func (m *GetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowId

	// no validation rules for RunId

	// no validation rules for Status

	switch v := m.Kind.(type) {
	case *GetResponse_Error:
		if v == nil {
			err := GetResponseValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetResponse_Outputs:
		if v == nil {
			err := GetResponseValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOutputs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetResponseValidationError{
						field:  "Outputs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetResponseValidationError{
						field:  "Outputs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOutputs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetResponseValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetResponseMultiError(errors)
	}

	return nil
}

// GetResponseMultiError is an error wrapping multiple validation errors
// returned by GetResponse.ValidateAll() if the designated constraints aren't met.
type GetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponseMultiError) AllErrors() []error { return m }

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}

// Validate checks the field values on Workflow_StepOutputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Workflow_StepOutputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Workflow_StepOutputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Workflow_StepOutputsMultiError, or nil if none found.
func (m *Workflow_StepOutputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Workflow_StepOutputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetStepValues()))
		i := 0
		for key := range m.GetStepValues() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetStepValues()[key]
			_ = val

			// no validation rules for StepValues[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, Workflow_StepOutputsValidationError{
							field:  fmt.Sprintf("StepValues[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, Workflow_StepOutputsValidationError{
							field:  fmt.Sprintf("StepValues[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return Workflow_StepOutputsValidationError{
						field:  fmt.Sprintf("StepValues[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return Workflow_StepOutputsMultiError(errors)
	}

	return nil
}

// Workflow_StepOutputsMultiError is an error wrapping multiple validation
// errors returned by Workflow_StepOutputs.ValidateAll() if the designated
// constraints aren't met.
type Workflow_StepOutputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Workflow_StepOutputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Workflow_StepOutputsMultiError) AllErrors() []error { return m }

// Workflow_StepOutputsValidationError is the validation error returned by
// Workflow_StepOutputs.Validate if the designated constraints aren't met.
type Workflow_StepOutputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Workflow_StepOutputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Workflow_StepOutputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Workflow_StepOutputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Workflow_StepOutputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Workflow_StepOutputsValidationError) ErrorName() string {
	return "Workflow_StepOutputsValidationError"
}

// Error satisfies the builtin error interface
func (e Workflow_StepOutputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflow_StepOutputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Workflow_StepOutputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Workflow_StepOutputsValidationError{}

// Validate checks the field values on Node_Outputs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Node_Outputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Node_Outputs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Node_OutputsMultiError, or
// nil if none found.
func (m *Node_Outputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Node_Outputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetNamedValues()))
		i := 0
		for key := range m.GetNamedValues() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetNamedValues()[key]
			_ = val

			// no validation rules for NamedValues[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, Node_OutputsValidationError{
							field:  fmt.Sprintf("NamedValues[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, Node_OutputsValidationError{
							field:  fmt.Sprintf("NamedValues[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return Node_OutputsValidationError{
						field:  fmt.Sprintf("NamedValues[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return Node_OutputsMultiError(errors)
	}

	return nil
}

// Node_OutputsMultiError is an error wrapping multiple validation errors
// returned by Node_Outputs.ValidateAll() if the designated constraints aren't met.
type Node_OutputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Node_OutputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Node_OutputsMultiError) AllErrors() []error { return m }

// Node_OutputsValidationError is the validation error returned by
// Node_Outputs.Validate if the designated constraints aren't met.
type Node_OutputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Node_OutputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Node_OutputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Node_OutputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Node_OutputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Node_OutputsValidationError) ErrorName() string { return "Node_OutputsValidationError" }

// Error satisfies the builtin error interface
func (e Node_OutputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode_Outputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Node_OutputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Node_OutputsValidationError{}

// Validate checks the field values on Value_Error with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Value_Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Value_Error with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Value_ErrorMultiError, or
// nil if none found.
func (m *Value_Error) ValidateAll() error {
	return m.validate(true)
}

func (m *Value_Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Code

	if len(errors) > 0 {
		return Value_ErrorMultiError(errors)
	}

	return nil
}

// Value_ErrorMultiError is an error wrapping multiple validation errors
// returned by Value_Error.ValidateAll() if the designated constraints aren't met.
type Value_ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Value_ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Value_ErrorMultiError) AllErrors() []error { return m }

// Value_ErrorValidationError is the validation error returned by
// Value_Error.Validate if the designated constraints aren't met.
type Value_ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Value_ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Value_ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Value_ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Value_ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Value_ErrorValidationError) ErrorName() string { return "Value_ErrorValidationError" }

// Error satisfies the builtin error interface
func (e Value_ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValue_Error.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Value_ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Value_ErrorValidationError{}

// Validate checks the field values on Task_Echo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Task_Echo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Echo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Task_EchoMultiError, or nil
// if none found.
func (m *Task_Echo) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Echo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Task_EchoMultiError(errors)
	}

	return nil
}

// Task_EchoMultiError is an error wrapping multiple validation errors returned
// by Task_Echo.ValidateAll() if the designated constraints aren't met.
type Task_EchoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_EchoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_EchoMultiError) AllErrors() []error { return m }

// Task_EchoValidationError is the validation error returned by
// Task_Echo.Validate if the designated constraints aren't met.
type Task_EchoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_EchoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_EchoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_EchoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_EchoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_EchoValidationError) ErrorName() string { return "Task_EchoValidationError" }

// Error satisfies the builtin error interface
func (e Task_EchoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Echo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_EchoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_EchoValidationError{}

// Validate checks the field values on Task_Printf with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Task_Printf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Printf with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Task_PrintfMultiError, or
// nil if none found.
func (m *Task_Printf) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Printf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Task_PrintfMultiError(errors)
	}

	return nil
}

// Task_PrintfMultiError is an error wrapping multiple validation errors
// returned by Task_Printf.ValidateAll() if the designated constraints aren't met.
type Task_PrintfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_PrintfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_PrintfMultiError) AllErrors() []error { return m }

// Task_PrintfValidationError is the validation error returned by
// Task_Printf.Validate if the designated constraints aren't met.
type Task_PrintfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_PrintfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_PrintfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_PrintfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_PrintfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_PrintfValidationError) ErrorName() string { return "Task_PrintfValidationError" }

// Error satisfies the builtin error interface
func (e Task_PrintfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Printf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_PrintfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_PrintfValidationError{}

// Validate checks the field values on Task_HTTP with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Task_HTTP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_HTTP with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Task_HTTPMultiError, or nil
// if none found.
func (m *Task_HTTP) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_HTTP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Task_HTTPMultiError(errors)
	}

	return nil
}

// Task_HTTPMultiError is an error wrapping multiple validation errors returned
// by Task_HTTP.ValidateAll() if the designated constraints aren't met.
type Task_HTTPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_HTTPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_HTTPMultiError) AllErrors() []error { return m }

// Task_HTTPValidationError is the validation error returned by
// Task_HTTP.Validate if the designated constraints aren't met.
type Task_HTTPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_HTTPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_HTTPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_HTTPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_HTTPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_HTTPValidationError) ErrorName() string { return "Task_HTTPValidationError" }

// Error satisfies the builtin error interface
func (e Task_HTTPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_HTTP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_HTTPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_HTTPValidationError{}

// Validate checks the field values on Task_CEL with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Task_CEL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_CEL with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Task_CELMultiError, or nil
// if none found.
func (m *Task_CEL) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_CEL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Task_CELMultiError(errors)
	}

	return nil
}

// Task_CELMultiError is an error wrapping multiple validation errors returned
// by Task_CEL.ValidateAll() if the designated constraints aren't met.
type Task_CELMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_CELMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_CELMultiError) AllErrors() []error { return m }

// Task_CELValidationError is the validation error returned by
// Task_CEL.Validate if the designated constraints aren't met.
type Task_CELValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_CELValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_CELValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_CELValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_CELValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_CELValidationError) ErrorName() string { return "Task_CELValidationError" }

// Error satisfies the builtin error interface
func (e Task_CELValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_CEL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_CELValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_CELValidationError{}

// Validate checks the field values on Task_Echo_Inputs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Task_Echo_Inputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Echo_Inputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Task_Echo_InputsMultiError, or nil if none found.
func (m *Task_Echo_Inputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Echo_Inputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return Task_Echo_InputsMultiError(errors)
	}

	return nil
}

// Task_Echo_InputsMultiError is an error wrapping multiple validation errors
// returned by Task_Echo_Inputs.ValidateAll() if the designated constraints
// aren't met.
type Task_Echo_InputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_Echo_InputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_Echo_InputsMultiError) AllErrors() []error { return m }

// Task_Echo_InputsValidationError is the validation error returned by
// Task_Echo_Inputs.Validate if the designated constraints aren't met.
type Task_Echo_InputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_Echo_InputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_Echo_InputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_Echo_InputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_Echo_InputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_Echo_InputsValidationError) ErrorName() string { return "Task_Echo_InputsValidationError" }

// Error satisfies the builtin error interface
func (e Task_Echo_InputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Echo_Inputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_Echo_InputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_Echo_InputsValidationError{}

// Validate checks the field values on Task_Echo_Outputs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Task_Echo_Outputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Echo_Outputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Task_Echo_OutputsMultiError, or nil if none found.
func (m *Task_Echo_Outputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Echo_Outputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return Task_Echo_OutputsMultiError(errors)
	}

	return nil
}

// Task_Echo_OutputsMultiError is an error wrapping multiple validation errors
// returned by Task_Echo_Outputs.ValidateAll() if the designated constraints
// aren't met.
type Task_Echo_OutputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_Echo_OutputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_Echo_OutputsMultiError) AllErrors() []error { return m }

// Task_Echo_OutputsValidationError is the validation error returned by
// Task_Echo_Outputs.Validate if the designated constraints aren't met.
type Task_Echo_OutputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_Echo_OutputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_Echo_OutputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_Echo_OutputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_Echo_OutputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_Echo_OutputsValidationError) ErrorName() string {
	return "Task_Echo_OutputsValidationError"
}

// Error satisfies the builtin error interface
func (e Task_Echo_OutputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Echo_Outputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_Echo_OutputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_Echo_OutputsValidationError{}

// Validate checks the field values on Task_Printf_Inputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Task_Printf_Inputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Printf_Inputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Task_Printf_InputsMultiError, or nil if none found.
func (m *Task_Printf_Inputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Printf_Inputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Format

	for idx, item := range m.GetArgs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Task_Printf_InputsValidationError{
						field:  fmt.Sprintf("Args[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Task_Printf_InputsValidationError{
						field:  fmt.Sprintf("Args[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Task_Printf_InputsValidationError{
					field:  fmt.Sprintf("Args[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Task_Printf_InputsMultiError(errors)
	}

	return nil
}

// Task_Printf_InputsMultiError is an error wrapping multiple validation errors
// returned by Task_Printf_Inputs.ValidateAll() if the designated constraints
// aren't met.
type Task_Printf_InputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_Printf_InputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_Printf_InputsMultiError) AllErrors() []error { return m }

// Task_Printf_InputsValidationError is the validation error returned by
// Task_Printf_Inputs.Validate if the designated constraints aren't met.
type Task_Printf_InputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_Printf_InputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_Printf_InputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_Printf_InputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_Printf_InputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_Printf_InputsValidationError) ErrorName() string {
	return "Task_Printf_InputsValidationError"
}

// Error satisfies the builtin error interface
func (e Task_Printf_InputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Printf_Inputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_Printf_InputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_Printf_InputsValidationError{}

// Validate checks the field values on Task_Printf_Outputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Task_Printf_Outputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Printf_Outputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Task_Printf_OutputsMultiError, or nil if none found.
func (m *Task_Printf_Outputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Printf_Outputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return Task_Printf_OutputsMultiError(errors)
	}

	return nil
}

// Task_Printf_OutputsMultiError is an error wrapping multiple validation
// errors returned by Task_Printf_Outputs.ValidateAll() if the designated
// constraints aren't met.
type Task_Printf_OutputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_Printf_OutputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_Printf_OutputsMultiError) AllErrors() []error { return m }

// Task_Printf_OutputsValidationError is the validation error returned by
// Task_Printf_Outputs.Validate if the designated constraints aren't met.
type Task_Printf_OutputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_Printf_OutputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_Printf_OutputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_Printf_OutputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_Printf_OutputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_Printf_OutputsValidationError) ErrorName() string {
	return "Task_Printf_OutputsValidationError"
}

// Error satisfies the builtin error interface
func (e Task_Printf_OutputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Printf_Outputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_Printf_OutputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_Printf_OutputsValidationError{}

// Validate checks the field values on Task_HTTP_Inputs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Task_HTTP_Inputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_HTTP_Inputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Task_HTTP_InputsMultiError, or nil if none found.
func (m *Task_HTTP_Inputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_HTTP_Inputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Headers

	if m.Method != nil {
		// no validation rules for Method
	}

	if m.Body != nil {
		// no validation rules for Body
	}

	if len(errors) > 0 {
		return Task_HTTP_InputsMultiError(errors)
	}

	return nil
}

// Task_HTTP_InputsMultiError is an error wrapping multiple validation errors
// returned by Task_HTTP_Inputs.ValidateAll() if the designated constraints
// aren't met.
type Task_HTTP_InputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_HTTP_InputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_HTTP_InputsMultiError) AllErrors() []error { return m }

// Task_HTTP_InputsValidationError is the validation error returned by
// Task_HTTP_Inputs.Validate if the designated constraints aren't met.
type Task_HTTP_InputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_HTTP_InputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_HTTP_InputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_HTTP_InputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_HTTP_InputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_HTTP_InputsValidationError) ErrorName() string { return "Task_HTTP_InputsValidationError" }

// Error satisfies the builtin error interface
func (e Task_HTTP_InputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_HTTP_Inputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_HTTP_InputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_HTTP_InputsValidationError{}

// Validate checks the field values on Task_HTTP_Outputs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Task_HTTP_Outputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_HTTP_Outputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Task_HTTP_OutputsMultiError, or nil if none found.
func (m *Task_HTTP_Outputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_HTTP_Outputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for Headers

	// no validation rules for Body

	if len(errors) > 0 {
		return Task_HTTP_OutputsMultiError(errors)
	}

	return nil
}

// Task_HTTP_OutputsMultiError is an error wrapping multiple validation errors
// returned by Task_HTTP_Outputs.ValidateAll() if the designated constraints
// aren't met.
type Task_HTTP_OutputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_HTTP_OutputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_HTTP_OutputsMultiError) AllErrors() []error { return m }

// Task_HTTP_OutputsValidationError is the validation error returned by
// Task_HTTP_Outputs.Validate if the designated constraints aren't met.
type Task_HTTP_OutputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_HTTP_OutputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_HTTP_OutputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_HTTP_OutputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_HTTP_OutputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_HTTP_OutputsValidationError) ErrorName() string {
	return "Task_HTTP_OutputsValidationError"
}

// Error satisfies the builtin error interface
func (e Task_HTTP_OutputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_HTTP_Outputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_HTTP_OutputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_HTTP_OutputsValidationError{}

// Validate checks the field values on Task_CEL_Inputs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Task_CEL_Inputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_CEL_Inputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Task_CEL_InputsMultiError, or nil if none found.
func (m *Task_CEL_Inputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_CEL_Inputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Expr

	{
		sorted_keys := make([]string, len(m.GetVars()))
		i := 0
		for key := range m.GetVars() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetVars()[key]
			_ = val

			// no validation rules for Vars[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, Task_CEL_InputsValidationError{
							field:  fmt.Sprintf("Vars[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, Task_CEL_InputsValidationError{
							field:  fmt.Sprintf("Vars[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return Task_CEL_InputsValidationError{
						field:  fmt.Sprintf("Vars[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return Task_CEL_InputsMultiError(errors)
	}

	return nil
}

// Task_CEL_InputsMultiError is an error wrapping multiple validation errors
// returned by Task_CEL_Inputs.ValidateAll() if the designated constraints
// aren't met.
type Task_CEL_InputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_CEL_InputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_CEL_InputsMultiError) AllErrors() []error { return m }

// Task_CEL_InputsValidationError is the validation error returned by
// Task_CEL_Inputs.Validate if the designated constraints aren't met.
type Task_CEL_InputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_CEL_InputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_CEL_InputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_CEL_InputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_CEL_InputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_CEL_InputsValidationError) ErrorName() string { return "Task_CEL_InputsValidationError" }

// Error satisfies the builtin error interface
func (e Task_CEL_InputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_CEL_Inputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_CEL_InputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_CEL_InputsValidationError{}

// Validate checks the field values on Task_CEL_Outputs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Task_CEL_Outputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_CEL_Outputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Task_CEL_OutputsMultiError, or nil if none found.
func (m *Task_CEL_Outputs) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_CEL_Outputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Task_CEL_OutputsValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Task_CEL_OutputsValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Task_CEL_OutputsValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Task_CEL_OutputsMultiError(errors)
	}

	return nil
}

// Task_CEL_OutputsMultiError is an error wrapping multiple validation errors
// returned by Task_CEL_Outputs.ValidateAll() if the designated constraints
// aren't met.
type Task_CEL_OutputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_CEL_OutputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_CEL_OutputsMultiError) AllErrors() []error { return m }

// Task_CEL_OutputsValidationError is the validation error returned by
// Task_CEL_Outputs.Validate if the designated constraints aren't met.
type Task_CEL_OutputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_CEL_OutputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_CEL_OutputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_CEL_OutputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_CEL_OutputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_CEL_OutputsValidationError) ErrorName() string { return "Task_CEL_OutputsValidationError" }

// Error satisfies the builtin error interface
func (e Task_CEL_OutputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_CEL_Outputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_CEL_OutputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_CEL_OutputsValidationError{}

// Validate checks the field values on RunResponse_Error with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RunResponse_Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunResponse_Error with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunResponse_ErrorMultiError, or nil if none found.
func (m *RunResponse_Error) ValidateAll() error {
	return m.validate(true)
}

func (m *RunResponse_Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return RunResponse_ErrorMultiError(errors)
	}

	return nil
}

// RunResponse_ErrorMultiError is an error wrapping multiple validation errors
// returned by RunResponse_Error.ValidateAll() if the designated constraints
// aren't met.
type RunResponse_ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunResponse_ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunResponse_ErrorMultiError) AllErrors() []error { return m }

// RunResponse_ErrorValidationError is the validation error returned by
// RunResponse_Error.Validate if the designated constraints aren't met.
type RunResponse_ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunResponse_ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunResponse_ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunResponse_ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunResponse_ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunResponse_ErrorValidationError) ErrorName() string {
	return "RunResponse_ErrorValidationError"
}

// Error satisfies the builtin error interface
func (e RunResponse_ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunResponse_Error.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunResponse_ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunResponse_ErrorValidationError{}
