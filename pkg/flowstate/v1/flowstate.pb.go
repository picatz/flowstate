// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: flowstate/v1/flowstate.proto

package flowstatev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	v1alpha1 "google.golang.org/genproto/googleapis/api/expr/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Value_Type int32

const (
	Value_TYPE_UNSPECIFIED Value_Type = 0
	Value_TYPE_STRING      Value_Type = 1
	Value_TYPE_INT         Value_Type = 2
	Value_TYPE_FLOAT       Value_Type = 3
	Value_TYPE_BOOL        Value_Type = 4
	Value_TYPE_STRUCT      Value_Type = 5
	Value_TYPE_LIST        Value_Type = 6
	Value_TYPE_EXPR        Value_Type = 7
	Value_TYPE_ERROR       Value_Type = 8
)

// Enum value maps for Value_Type.
var (
	Value_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_STRING",
		2: "TYPE_INT",
		3: "TYPE_FLOAT",
		4: "TYPE_BOOL",
		5: "TYPE_STRUCT",
		6: "TYPE_LIST",
		7: "TYPE_EXPR",
		8: "TYPE_ERROR",
	}
	Value_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_STRING":      1,
		"TYPE_INT":         2,
		"TYPE_FLOAT":       3,
		"TYPE_BOOL":        4,
		"TYPE_STRUCT":      5,
		"TYPE_LIST":        6,
		"TYPE_EXPR":        7,
		"TYPE_ERROR":       8,
	}
)

func (x Value_Type) Enum() *Value_Type {
	p := new(Value_Type)
	*p = x
	return p
}

func (x Value_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Value_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_flowstate_v1_flowstate_proto_enumTypes[0].Descriptor()
}

func (Value_Type) Type() protoreflect.EnumType {
	return &file_flowstate_v1_flowstate_proto_enumTypes[0]
}

func (x Value_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Value_Type.Descriptor instead.
func (Value_Type) EnumDescriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{2, 0}
}

type Value_Error_Code int32

const (
	Value_Error_CODE_UNSPECIFIED       Value_Error_Code = 0
	Value_Error_CODE_INVALID_ARGUMENT  Value_Error_Code = 1
	Value_Error_CODE_NOT_FOUND         Value_Error_Code = 2
	Value_Error_CODE_PERMISSION_DENIED Value_Error_Code = 3
	Value_Error_CODE_UNAUTHENTICATED   Value_Error_Code = 4
	Value_Error_CODE_INTERNAL          Value_Error_Code = 5
	Value_Error_CODE_UNAVAILABLE       Value_Error_Code = 6
)

// Enum value maps for Value_Error_Code.
var (
	Value_Error_Code_name = map[int32]string{
		0: "CODE_UNSPECIFIED",
		1: "CODE_INVALID_ARGUMENT",
		2: "CODE_NOT_FOUND",
		3: "CODE_PERMISSION_DENIED",
		4: "CODE_UNAUTHENTICATED",
		5: "CODE_INTERNAL",
		6: "CODE_UNAVAILABLE",
	}
	Value_Error_Code_value = map[string]int32{
		"CODE_UNSPECIFIED":       0,
		"CODE_INVALID_ARGUMENT":  1,
		"CODE_NOT_FOUND":         2,
		"CODE_PERMISSION_DENIED": 3,
		"CODE_UNAUTHENTICATED":   4,
		"CODE_INTERNAL":          5,
		"CODE_UNAVAILABLE":       6,
	}
)

func (x Value_Error_Code) Enum() *Value_Error_Code {
	p := new(Value_Error_Code)
	*p = x
	return p
}

func (x Value_Error_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Value_Error_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_flowstate_v1_flowstate_proto_enumTypes[1].Descriptor()
}

func (Value_Error_Code) Type() protoreflect.EnumType {
	return &file_flowstate_v1_flowstate_proto_enumTypes[1]
}

func (x Value_Error_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Value_Error_Code.Descriptor instead.
func (Value_Error_Code) EnumDescriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{2, 0, 0}
}

type RunResponse_Status int32

const (
	RunResponse_STATUS_UNSPECIFIED RunResponse_Status = 0
	RunResponse_STATUS_RUNNING     RunResponse_Status = 1
	RunResponse_STATUS_COMPLETED   RunResponse_Status = 2
	RunResponse_STATUS_FAILED      RunResponse_Status = 3
	RunResponse_STATUS_CANCELED    RunResponse_Status = 4
	RunResponse_STATUS_TERMINATED  RunResponse_Status = 5
	RunResponse_STATUS_TIMED_OUT   RunResponse_Status = 6
)

// Enum value maps for RunResponse_Status.
var (
	RunResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_RUNNING",
		2: "STATUS_COMPLETED",
		3: "STATUS_FAILED",
		4: "STATUS_CANCELED",
		5: "STATUS_TERMINATED",
		6: "STATUS_TIMED_OUT",
	}
	RunResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_RUNNING":     1,
		"STATUS_COMPLETED":   2,
		"STATUS_FAILED":      3,
		"STATUS_CANCELED":    4,
		"STATUS_TERMINATED":  5,
		"STATUS_TIMED_OUT":   6,
	}
)

func (x RunResponse_Status) Enum() *RunResponse_Status {
	p := new(RunResponse_Status)
	*p = x
	return p
}

func (x RunResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_flowstate_v1_flowstate_proto_enumTypes[2].Descriptor()
}

func (RunResponse_Status) Type() protoreflect.EnumType {
	return &file_flowstate_v1_flowstate_proto_enumTypes[2]
}

func (x RunResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunResponse_Status.Descriptor instead.
func (RunResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{5, 0}
}

// Workflows in Flowstate is a collection of steps that can be executed in a
// specific order. Each step within a workflow can have inputs and outputs,
// and can be a task that performs some action. The workflow can be run and the
// outputs of each step are collected in a structured way that allows for subsequent
// steps to access the outputs of previous steps.
type Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workflow is identified by a unique name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Workflows can have an optional description that provides additional context or
	// information about the workflow itself that may be useful for users or developers.
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Steps are the individual tasks or operations that make up the workflow.
	// Each step is represented by a Node, which can be a task or another type of
	// operation. The steps are executed in the order they are defined in the workflow.
	// Each step can have its own inputs and outputs, allowing for complex workflows
	// that can perform a variety of operations.
	Steps []*Node `protobuf:"bytes,3,rep,name=steps,proto3" json:"steps,omitempty"`
	// Inputs are key-value pairs that can be used to provide initial data to the workflow.
	// These inputs can be used by the steps in the workflow to perform their tasks.
	Inputs map[string]*Value `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Labels are key-value pairs that can be used to organize and categorize workflows.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{0}
}

func (x *Workflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workflow) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Workflow) GetSteps() []*Node {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Workflow) GetInputs() map[string]*Value {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Workflow) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Node represents a step in the workflow. Each node can be a task or another type of operation.
// Nodes can have outputs that are structured as named values, allowing for complex workflows
// where the outputs of one node can be used as inputs to another node.
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each node has a unique identifier within the workflow. This ID is used to reference the
	// node in the workflow's step outputs and can be used to access the outputs of the
	// node after the workflow has been executed.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A node must be a specific kind of operation.
	//
	// Types that are assignable to Kind:
	//
	//	*Node_Task
	Kind isNode_Kind `protobuf_oneof:"kind"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{1}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *Node) GetKind() isNode_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Node) GetTask() *Task {
	if x, ok := x.GetKind().(*Node_Task); ok {
		return x.Task
	}
	return nil
}

type isNode_Kind interface {
	isNode_Kind()
}

type Node_Task struct {
	Task *Task `protobuf:"bytes,2,opt,name=task,proto3,oneof"`
}

func (*Node_Task) isNode_Kind() {}

// Value represents a value that can be used in expressions or as inputs/outputs in tasks.
// It can be a primitive type (like string, int, float, or bool), a structured type
// (like a struct or list), an expression (ParsedExpr), or an error. The Value type is used
// to encapsulate different kinds of data that can be used within the workflow.
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Value_Expr
	//	*Value_Literal
	//	*Value_Error_
	Kind isValue_Kind `protobuf_oneof:"kind"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{2}
}

func (m *Value) GetKind() isValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Value) GetExpr() *v1alpha1.ParsedExpr {
	if x, ok := x.GetKind().(*Value_Expr); ok {
		return x.Expr
	}
	return nil
}

func (x *Value) GetLiteral() *v1alpha1.Value {
	if x, ok := x.GetKind().(*Value_Literal); ok {
		return x.Literal
	}
	return nil
}

func (x *Value) GetError() *Value_Error {
	if x, ok := x.GetKind().(*Value_Error_); ok {
		return x.Error
	}
	return nil
}

type isValue_Kind interface {
	isValue_Kind()
}

type Value_Expr struct {
	Expr *v1alpha1.ParsedExpr `protobuf:"bytes,1,opt,name=expr,proto3,oneof"`
}

type Value_Literal struct {
	Literal *v1alpha1.Value `protobuf:"bytes,2,opt,name=literal,proto3,oneof"`
}

type Value_Error_ struct {
	Error *Value_Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*Value_Expr) isValue_Kind() {}

func (*Value_Literal) isValue_Kind() {}

func (*Value_Error_) isValue_Kind() {}

// Task represents a specific operation that can be performed within a workflow as a node step.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tasks have specific names that identify the type of task being performed,
	// such as "echo", "printf", or "http". The name is used to determine which
	// task implementation to execute when the workflow is run.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Tasks can have an optional description that provides additional context or
	// information about the task itself. This can be useful for users or developers
	// to understand what the task does and how it should be used within the workflow.
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Inputs are the parameters that the task requires to perform its operation.
	Inputs map[string]*Value `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{3}
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Task) GetInputs() map[string]*Value {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// RunRequest is the request message for running a workflow.
type RunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflow *Workflow `protobuf:"bytes,1,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{4}
}

func (x *RunRequest) GetWorkflow() *Workflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

// RunResponse is the response message for a workflow run.
type RunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string             `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId      string             `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Status     RunResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=flowstate.v1.RunResponse_Status" json:"status,omitempty"`
	// Types that are assignable to Kind:
	//
	//	*RunResponse_Error_
	//	*RunResponse_Outputs
	Kind isRunResponse_Kind `protobuf_oneof:"kind"`
}

func (x *RunResponse) Reset() {
	*x = RunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponse) ProtoMessage() {}

func (x *RunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponse.ProtoReflect.Descriptor instead.
func (*RunResponse) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{5}
}

func (x *RunResponse) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *RunResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RunResponse) GetStatus() RunResponse_Status {
	if x != nil {
		return x.Status
	}
	return RunResponse_STATUS_UNSPECIFIED
}

func (m *RunResponse) GetKind() isRunResponse_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *RunResponse) GetError() *RunResponse_Error {
	if x, ok := x.GetKind().(*RunResponse_Error_); ok {
		return x.Error
	}
	return nil
}

func (x *RunResponse) GetOutputs() *Workflow_StepOutputs {
	if x, ok := x.GetKind().(*RunResponse_Outputs); ok {
		return x.Outputs
	}
	return nil
}

type isRunResponse_Kind interface {
	isRunResponse_Kind()
}

type RunResponse_Error_ struct {
	Error *RunResponse_Error `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

type RunResponse_Outputs struct {
	Outputs *Workflow_StepOutputs `protobuf:"bytes,5,opt,name=outputs,proto3,oneof"`
}

func (*RunResponse_Error_) isRunResponse_Kind() {}

func (*RunResponse_Outputs) isRunResponse_Kind() {}

// GetRequest is the request message for getting a workflow run.
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string  `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId      *string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3,oneof" json:"run_id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{6}
}

func (x *GetRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *GetRequest) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

// GetResponse is the response message for getting a workflow run.
type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string             `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId      string             `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Status     RunResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=flowstate.v1.RunResponse_Status" json:"status,omitempty"`
	// Types that are assignable to Kind:
	//
	//	*GetResponse_Error
	//	*GetResponse_Outputs
	Kind isGetResponse_Kind `protobuf_oneof:"kind"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{7}
}

func (x *GetResponse) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *GetResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetResponse) GetStatus() RunResponse_Status {
	if x != nil {
		return x.Status
	}
	return RunResponse_STATUS_UNSPECIFIED
}

func (m *GetResponse) GetKind() isGetResponse_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *GetResponse) GetError() *RunResponse_Error {
	if x, ok := x.GetKind().(*GetResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GetResponse) GetOutputs() *Workflow_StepOutputs {
	if x, ok := x.GetKind().(*GetResponse_Outputs); ok {
		return x.Outputs
	}
	return nil
}

type isGetResponse_Kind interface {
	isGetResponse_Kind()
}

type GetResponse_Error struct {
	Error *RunResponse_Error `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

type GetResponse_Outputs struct {
	Outputs *Workflow_StepOutputs `protobuf:"bytes,5,opt,name=outputs,proto3,oneof"`
}

func (*GetResponse_Error) isGetResponse_Kind() {}

func (*GetResponse_Outputs) isGetResponse_Kind() {}

// StepOutputs is a map of step IDs to their outputs. Each step's outputs are
// represented as a map of named values, allowing for structured outputs that
// can be referenced by subsequent steps in the workflow.
//
// This is used to collect the outputs of each step in the workflow, which can
// then be used as inputs to other steps or returned as the final result of the
// workflow run.
type Workflow_StepOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StepValues map[string]*Node_Outputs `protobuf:"bytes,1,rep,name=step_values,json=stepValues,proto3" json:"step_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Workflow_StepOutputs) Reset() {
	*x = Workflow_StepOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow_StepOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow_StepOutputs) ProtoMessage() {}

func (x *Workflow_StepOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow_StepOutputs.ProtoReflect.Descriptor instead.
func (*Workflow_StepOutputs) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Workflow_StepOutputs) GetStepValues() map[string]*Node_Outputs {
	if x != nil {
		return x.StepValues
	}
	return nil
}

// Outputs are the results produced by the node. Each output is a named value that can be
// referenced by subsequent nodes in the workflow. This allows for structured outputs that
// can be used to pass data between nodes.
type Node_Outputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamedValues map[string]*Value `protobuf:"bytes,1,rep,name=named_values,json=namedValues,proto3" json:"named_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Node_Outputs) Reset() {
	*x = Node_Outputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_Outputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_Outputs) ProtoMessage() {}

func (x *Node_Outputs) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_Outputs.ProtoReflect.Descriptor instead.
func (*Node_Outputs) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Node_Outputs) GetNamedValues() map[string]*Value {
	if x != nil {
		return x.NamedValues
	}
	return nil
}

type Value_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string           `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code    Value_Error_Code `protobuf:"varint,2,opt,name=code,proto3,enum=flowstate.v1.Value_Error_Code" json:"code,omitempty"`
}

func (x *Value_Error) Reset() {
	*x = Value_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Error) ProtoMessage() {}

func (x *Value_Error) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Error.ProtoReflect.Descriptor instead.
func (*Value_Error) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Value_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Value_Error) GetCode() Value_Error_Code {
	if x != nil {
		return x.Code
	}
	return Value_Error_CODE_UNSPECIFIED
}

// Echo is a simple task that echoes back the input message.
type Task_Echo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Task_Echo) Reset() {
	*x = Task_Echo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Echo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Echo) ProtoMessage() {}

func (x *Task_Echo) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Echo.ProtoReflect.Descriptor instead.
func (*Task_Echo) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{3, 0}
}

// Printf is a task that formats a string using a format string and a list of arguments.
type Task_Printf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Task_Printf) Reset() {
	*x = Task_Printf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Printf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Printf) ProtoMessage() {}

func (x *Task_Printf) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Printf.ProtoReflect.Descriptor instead.
func (*Task_Printf) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{3, 1}
}

// HTTP is a task that performs an HTTP request to a specified URL with optional method, headers, and body.
// It returns the HTTP response status code, headers, and body as outputs.
//
// This is obviously useful, but also dangerous since it's just SSRF (Server-Side Request Forgery) in disguise.
type Task_HTTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Task_HTTP) Reset() {
	*x = Task_HTTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_HTTP) ProtoMessage() {}

func (x *Task_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_HTTP.ProtoReflect.Descriptor instead.
func (*Task_HTTP) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{3, 2}
}

// CEL is a task that evaluates an arbitrary CEL expression and returns the result.
// The expression string can reference outputs from previous steps in the workflow.
type Task_CEL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Task_CEL) Reset() {
	*x = Task_CEL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_CEL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_CEL) ProtoMessage() {}

func (x *Task_CEL) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_CEL.ProtoReflect.Descriptor instead.
func (*Task_CEL) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{3, 3}
}

type Task_Echo_Inputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Task_Echo_Inputs) Reset() {
	*x = Task_Echo_Inputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Echo_Inputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Echo_Inputs) ProtoMessage() {}

func (x *Task_Echo_Inputs) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Echo_Inputs.ProtoReflect.Descriptor instead.
func (*Task_Echo_Inputs) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *Task_Echo_Inputs) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Task_Echo_Outputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Task_Echo_Outputs) Reset() {
	*x = Task_Echo_Outputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Echo_Outputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Echo_Outputs) ProtoMessage() {}

func (x *Task_Echo_Outputs) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Echo_Outputs.ProtoReflect.Descriptor instead.
func (*Task_Echo_Outputs) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{3, 0, 1}
}

func (x *Task_Echo_Outputs) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type Task_Printf_Inputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format string   `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	Args   []*Value `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Task_Printf_Inputs) Reset() {
	*x = Task_Printf_Inputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Printf_Inputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Printf_Inputs) ProtoMessage() {}

func (x *Task_Printf_Inputs) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Printf_Inputs.ProtoReflect.Descriptor instead.
func (*Task_Printf_Inputs) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{3, 1, 0}
}

func (x *Task_Printf_Inputs) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Task_Printf_Inputs) GetArgs() []*Value {
	if x != nil {
		return x.Args
	}
	return nil
}

type Task_Printf_Outputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Task_Printf_Outputs) Reset() {
	*x = Task_Printf_Outputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Printf_Outputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Printf_Outputs) ProtoMessage() {}

func (x *Task_Printf_Outputs) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Printf_Outputs.ProtoReflect.Descriptor instead.
func (*Task_Printf_Outputs) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{3, 1, 1}
}

func (x *Task_Printf_Outputs) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type Task_HTTP_Inputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url     string            `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Method  *string           `protobuf:"bytes,2,opt,name=method,proto3,oneof" json:"method,omitempty"`
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body    *string           `protobuf:"bytes,4,opt,name=body,proto3,oneof" json:"body,omitempty"`
}

func (x *Task_HTTP_Inputs) Reset() {
	*x = Task_HTTP_Inputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_HTTP_Inputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_HTTP_Inputs) ProtoMessage() {}

func (x *Task_HTTP_Inputs) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_HTTP_Inputs.ProtoReflect.Descriptor instead.
func (*Task_HTTP_Inputs) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{3, 2, 0}
}

func (x *Task_HTTP_Inputs) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Task_HTTP_Inputs) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *Task_HTTP_Inputs) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Task_HTTP_Inputs) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

type Task_HTTP_Outputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32             `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Headers    map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body       string            `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Task_HTTP_Outputs) Reset() {
	*x = Task_HTTP_Outputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_HTTP_Outputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_HTTP_Outputs) ProtoMessage() {}

func (x *Task_HTTP_Outputs) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_HTTP_Outputs.ProtoReflect.Descriptor instead.
func (*Task_HTTP_Outputs) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{3, 2, 1}
}

func (x *Task_HTTP_Outputs) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Task_HTTP_Outputs) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Task_HTTP_Outputs) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type Task_CEL_Inputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	// Additional variables that can be referenced from the CEL expression.
	// Each key represents the variable name and the value is resolved prior
	// to evaluating the expression.
	Vars map[string]*Value `protobuf:"bytes,2,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional list of CEL extension libraries to enable when evaluating the
	// expression. Supported values include "math", "strings", "lists",
	// "sets", "encoders", "protos", "bindings", and "comprehensions".
	Libs []string `protobuf:"bytes,3,rep,name=libs,proto3" json:"libs,omitempty"`
}

func (x *Task_CEL_Inputs) Reset() {
	*x = Task_CEL_Inputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_CEL_Inputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_CEL_Inputs) ProtoMessage() {}

func (x *Task_CEL_Inputs) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_CEL_Inputs.ProtoReflect.Descriptor instead.
func (*Task_CEL_Inputs) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{3, 3, 0}
}

func (x *Task_CEL_Inputs) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *Task_CEL_Inputs) GetVars() map[string]*Value {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *Task_CEL_Inputs) GetLibs() []string {
	if x != nil {
		return x.Libs
	}
	return nil
}

type Task_CEL_Outputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of evaluating the CEL expression. The dynamic type depends on
	// the expression itself.
	Result *Value `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Task_CEL_Outputs) Reset() {
	*x = Task_CEL_Outputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_CEL_Outputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_CEL_Outputs) ProtoMessage() {}

func (x *Task_CEL_Outputs) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_CEL_Outputs.ProtoReflect.Descriptor instead.
func (*Task_CEL_Outputs) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{3, 3, 1}
}

func (x *Task_CEL_Outputs) GetResult() *Value {
	if x != nil {
		return x.Result
	}
	return nil
}

type RunResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RunResponse_Error) Reset() {
	*x = RunResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flowstate_v1_flowstate_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponse_Error) ProtoMessage() {}

func (x *RunResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_flowstate_v1_flowstate_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponse_Error.ProtoReflect.Descriptor instead.
func (*RunResponse_Error) Descriptor() ([]byte, []int) {
	return file_flowstate_v1_flowstate_proto_rawDescGZIP(), []int{5, 0}
}

func (x *RunResponse_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_flowstate_v1_flowstate_proto protoreflect.FileDescriptor

var file_flowstate_v1_flowstate_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x70,
	0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x05, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x22, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x1c, 0xc8, 0x01, 0x01, 0x72, 0x17, 0x10,
	0x01, 0x18, 0x80, 0x01, 0x32, 0x10, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x42, 0x15, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0f, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x09, 0x08, 0x01,
	0x10, 0x64, 0x22, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x4f,
	0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x13, 0xe0, 0x41, 0x01, 0xba, 0x48, 0x0d, 0x9a, 0x01, 0x0a, 0x22, 0x03, 0xc8,
	0x01, 0x01, 0x2a, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x4f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x13, 0xe0, 0x41, 0x01, 0xba, 0x48, 0x0d, 0x9a, 0x01, 0x0a, 0x22, 0x03,
	0xc8, 0x01, 0x01, 0x2a, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0xd5, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x6b, 0x0a, 0x0b, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74,
	0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x16, 0xe0, 0x41, 0x02, 0xba, 0x48,
	0x10, 0xc8, 0x01, 0x01, 0x9a, 0x01, 0x0a, 0x22, 0x03, 0xc8, 0x01, 0x01, 0x2a, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x59, 0x0a,
	0x0f, 0x53, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x02, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x1c,
	0xc8, 0x01, 0x01, 0x72, 0x17, 0x10, 0x01, 0x18, 0x80, 0x01, 0x32, 0x10, 0x5e, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0xc6, 0x01, 0x0a, 0x07, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x16, 0xe0, 0x41, 0x02, 0xba, 0x48,
	0x10, 0xc8, 0x01, 0x01, 0x9a, 0x01, 0x0a, 0x22, 0x03, 0xc8, 0x01, 0x01, 0x2a, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x53,
	0x0a, 0x10, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x05, 0xba, 0x48, 0x02,
	0x08, 0x01, 0x22, 0x80, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x04,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72,
	0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x9f, 0x02, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x23, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x10, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01,
	0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xaa, 0x01,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x22, 0x99, 0x01, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x58, 0x50, 0x52, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x42, 0x0d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x05,
	0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0xcb, 0x0a, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x36,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe0, 0x41,
	0x02, 0xba, 0x48, 0x1c, 0xc8, 0x01, 0x01, 0x72, 0x17, 0x10, 0x01, 0x18, 0x80, 0x01, 0x32, 0x10,
	0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2b, 0x24,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07,
	0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x02, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x16, 0xe0, 0x41, 0x01, 0xba, 0x48,
	0x10, 0xc8, 0x01, 0x01, 0x9a, 0x01, 0x0a, 0x22, 0x03, 0xc8, 0x01, 0x01, 0x2a, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x60, 0x0a, 0x04, 0x45, 0x63, 0x68,
	0x6f, 0x1a, 0x2d, 0x0a, 0x06, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41,
	0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x29, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xa0, 0x01, 0x0a, 0x06,
	0x50, 0x72, 0x69, 0x6e, 0x74, 0x66, 0x1a, 0x6b, 0x0a, 0x06, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x15, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x0f, 0xc8, 0x01,
	0x01, 0x92, 0x01, 0x09, 0x08, 0x01, 0x10, 0x64, 0x22, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x1a, 0x29, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xff,
	0x03, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x1a, 0xa5, 0x02, 0x0a, 0x06, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x49, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba, 0x48, 0x29, 0x72, 0x27, 0x10, 0x03, 0x18, 0x06, 0x32,
	0x21, 0x5e, 0x28, 0x3f, 0x69, 0x29, 0x28, 0x47, 0x45, 0x54, 0x7c, 0x50, 0x4f, 0x53, 0x54, 0x7c,
	0x50, 0x55, 0x54, 0x7c, 0x50, 0x41, 0x54, 0x43, 0x48, 0x7c, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x29, 0x24, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x45, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x1a,
	0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x1a,
	0xce, 0x01, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0xba, 0x48, 0x07, 0x1a, 0x05, 0x18, 0xd7, 0x04, 0x28, 0x64, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0xa0, 0x02, 0x0a, 0x03, 0x43, 0x45, 0x4c, 0x1a, 0xd8, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x12, 0x4d, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x45, 0x4c, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e,
	0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10, 0xba, 0x48, 0x0d, 0x9a, 0x01,
	0x0a, 0x22, 0x03, 0xc8, 0x01, 0x01, 0x2a, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x76, 0x61, 0x72,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x62, 0x73, 0x1a, 0x4c, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x33,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x1a, 0x4e, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x09, 0xe0, 0x41, 0x02,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x22, 0xfd, 0x03, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x04, 0x10,
	0x01, 0x20, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74,
	0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x1a, 0x29, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x9f, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54,
	0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10,
	0x06, 0x42, 0x0d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01,
	0x22, 0x69, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x96, 0x02, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x04,
	0x10, 0x01, 0x20, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53,
	0x74, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x42, 0x0d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x05, 0xba,
	0x48, 0x02, 0x08, 0x01, 0x32, 0x8d, 0x01, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12,
	0x18, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x18, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0xad, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x38, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x63, 0x61, 0x74, 0x7a, 0x2f, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x46, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x46, 0x6c,
	0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x46, 0x6c, 0x6f, 0x77,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flowstate_v1_flowstate_proto_rawDescOnce sync.Once
	file_flowstate_v1_flowstate_proto_rawDescData = file_flowstate_v1_flowstate_proto_rawDesc
)

func file_flowstate_v1_flowstate_proto_rawDescGZIP() []byte {
	file_flowstate_v1_flowstate_proto_rawDescOnce.Do(func() {
		file_flowstate_v1_flowstate_proto_rawDescData = protoimpl.X.CompressGZIP(file_flowstate_v1_flowstate_proto_rawDescData)
	})
	return file_flowstate_v1_flowstate_proto_rawDescData
}

var file_flowstate_v1_flowstate_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_flowstate_v1_flowstate_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_flowstate_v1_flowstate_proto_goTypes = []interface{}{
	(Value_Type)(0),              // 0: flowstate.v1.Value.Type
	(Value_Error_Code)(0),        // 1: flowstate.v1.Value.Error.Code
	(RunResponse_Status)(0),      // 2: flowstate.v1.RunResponse.Status
	(*Workflow)(nil),             // 3: flowstate.v1.Workflow
	(*Node)(nil),                 // 4: flowstate.v1.Node
	(*Value)(nil),                // 5: flowstate.v1.Value
	(*Task)(nil),                 // 6: flowstate.v1.Task
	(*RunRequest)(nil),           // 7: flowstate.v1.RunRequest
	(*RunResponse)(nil),          // 8: flowstate.v1.RunResponse
	(*GetRequest)(nil),           // 9: flowstate.v1.GetRequest
	(*GetResponse)(nil),          // 10: flowstate.v1.GetResponse
	(*Workflow_StepOutputs)(nil), // 11: flowstate.v1.Workflow.StepOutputs
	nil,                          // 12: flowstate.v1.Workflow.InputsEntry
	nil,                          // 13: flowstate.v1.Workflow.LabelsEntry
	nil,                          // 14: flowstate.v1.Workflow.StepOutputs.StepValuesEntry
	(*Node_Outputs)(nil),         // 15: flowstate.v1.Node.Outputs
	nil,                          // 16: flowstate.v1.Node.Outputs.NamedValuesEntry
	(*Value_Error)(nil),          // 17: flowstate.v1.Value.Error
	(*Task_Echo)(nil),            // 18: flowstate.v1.Task.Echo
	(*Task_Printf)(nil),          // 19: flowstate.v1.Task.Printf
	(*Task_HTTP)(nil),            // 20: flowstate.v1.Task.HTTP
	(*Task_CEL)(nil),             // 21: flowstate.v1.Task.CEL
	nil,                          // 22: flowstate.v1.Task.InputsEntry
	(*Task_Echo_Inputs)(nil),     // 23: flowstate.v1.Task.Echo.Inputs
	(*Task_Echo_Outputs)(nil),    // 24: flowstate.v1.Task.Echo.Outputs
	(*Task_Printf_Inputs)(nil),   // 25: flowstate.v1.Task.Printf.Inputs
	(*Task_Printf_Outputs)(nil),  // 26: flowstate.v1.Task.Printf.Outputs
	(*Task_HTTP_Inputs)(nil),     // 27: flowstate.v1.Task.HTTP.Inputs
	(*Task_HTTP_Outputs)(nil),    // 28: flowstate.v1.Task.HTTP.Outputs
	nil,                          // 29: flowstate.v1.Task.HTTP.Inputs.HeadersEntry
	nil,                          // 30: flowstate.v1.Task.HTTP.Outputs.HeadersEntry
	(*Task_CEL_Inputs)(nil),      // 31: flowstate.v1.Task.CEL.Inputs
	(*Task_CEL_Outputs)(nil),     // 32: flowstate.v1.Task.CEL.Outputs
	nil,                          // 33: flowstate.v1.Task.CEL.Inputs.VarsEntry
	(*RunResponse_Error)(nil),    // 34: flowstate.v1.RunResponse.Error
	(*v1alpha1.ParsedExpr)(nil),  // 35: google.api.expr.v1alpha1.ParsedExpr
	(*v1alpha1.Value)(nil),       // 36: google.api.expr.v1alpha1.Value
}
var file_flowstate_v1_flowstate_proto_depIdxs = []int32{
	4,  // 0: flowstate.v1.Workflow.steps:type_name -> flowstate.v1.Node
	12, // 1: flowstate.v1.Workflow.inputs:type_name -> flowstate.v1.Workflow.InputsEntry
	13, // 2: flowstate.v1.Workflow.labels:type_name -> flowstate.v1.Workflow.LabelsEntry
	6,  // 3: flowstate.v1.Node.task:type_name -> flowstate.v1.Task
	35, // 4: flowstate.v1.Value.expr:type_name -> google.api.expr.v1alpha1.ParsedExpr
	36, // 5: flowstate.v1.Value.literal:type_name -> google.api.expr.v1alpha1.Value
	17, // 6: flowstate.v1.Value.error:type_name -> flowstate.v1.Value.Error
	22, // 7: flowstate.v1.Task.inputs:type_name -> flowstate.v1.Task.InputsEntry
	3,  // 8: flowstate.v1.RunRequest.workflow:type_name -> flowstate.v1.Workflow
	2,  // 9: flowstate.v1.RunResponse.status:type_name -> flowstate.v1.RunResponse.Status
	34, // 10: flowstate.v1.RunResponse.error:type_name -> flowstate.v1.RunResponse.Error
	11, // 11: flowstate.v1.RunResponse.outputs:type_name -> flowstate.v1.Workflow.StepOutputs
	2,  // 12: flowstate.v1.GetResponse.status:type_name -> flowstate.v1.RunResponse.Status
	34, // 13: flowstate.v1.GetResponse.error:type_name -> flowstate.v1.RunResponse.Error
	11, // 14: flowstate.v1.GetResponse.outputs:type_name -> flowstate.v1.Workflow.StepOutputs
	14, // 15: flowstate.v1.Workflow.StepOutputs.step_values:type_name -> flowstate.v1.Workflow.StepOutputs.StepValuesEntry
	5,  // 16: flowstate.v1.Workflow.InputsEntry.value:type_name -> flowstate.v1.Value
	15, // 17: flowstate.v1.Workflow.StepOutputs.StepValuesEntry.value:type_name -> flowstate.v1.Node.Outputs
	16, // 18: flowstate.v1.Node.Outputs.named_values:type_name -> flowstate.v1.Node.Outputs.NamedValuesEntry
	5,  // 19: flowstate.v1.Node.Outputs.NamedValuesEntry.value:type_name -> flowstate.v1.Value
	1,  // 20: flowstate.v1.Value.Error.code:type_name -> flowstate.v1.Value.Error.Code
	5,  // 21: flowstate.v1.Task.InputsEntry.value:type_name -> flowstate.v1.Value
	5,  // 22: flowstate.v1.Task.Printf.Inputs.args:type_name -> flowstate.v1.Value
	29, // 23: flowstate.v1.Task.HTTP.Inputs.headers:type_name -> flowstate.v1.Task.HTTP.Inputs.HeadersEntry
	30, // 24: flowstate.v1.Task.HTTP.Outputs.headers:type_name -> flowstate.v1.Task.HTTP.Outputs.HeadersEntry
	33, // 25: flowstate.v1.Task.CEL.Inputs.vars:type_name -> flowstate.v1.Task.CEL.Inputs.VarsEntry
	5,  // 26: flowstate.v1.Task.CEL.Outputs.result:type_name -> flowstate.v1.Value
	5,  // 27: flowstate.v1.Task.CEL.Inputs.VarsEntry.value:type_name -> flowstate.v1.Value
	7,  // 28: flowstate.v1.WorkflowService.Run:input_type -> flowstate.v1.RunRequest
	9,  // 29: flowstate.v1.WorkflowService.Get:input_type -> flowstate.v1.GetRequest
	8,  // 30: flowstate.v1.WorkflowService.Run:output_type -> flowstate.v1.RunResponse
	10, // 31: flowstate.v1.WorkflowService.Get:output_type -> flowstate.v1.GetResponse
	30, // [30:32] is the sub-list for method output_type
	28, // [28:30] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_flowstate_v1_flowstate_proto_init() }
func file_flowstate_v1_flowstate_proto_init() {
	if File_flowstate_v1_flowstate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flowstate_v1_flowstate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workflow_StepOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_Outputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Echo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Printf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_HTTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_CEL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Echo_Inputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Echo_Outputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Printf_Inputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Printf_Outputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_HTTP_Inputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_HTTP_Outputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_CEL_Inputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_CEL_Outputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flowstate_v1_flowstate_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flowstate_v1_flowstate_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_flowstate_v1_flowstate_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Node_Task)(nil),
	}
	file_flowstate_v1_flowstate_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Value_Expr)(nil),
		(*Value_Literal)(nil),
		(*Value_Error_)(nil),
	}
	file_flowstate_v1_flowstate_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_flowstate_v1_flowstate_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*RunResponse_Error_)(nil),
		(*RunResponse_Outputs)(nil),
	}
	file_flowstate_v1_flowstate_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_flowstate_v1_flowstate_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GetResponse_Error)(nil),
		(*GetResponse_Outputs)(nil),
	}
	file_flowstate_v1_flowstate_proto_msgTypes[24].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flowstate_v1_flowstate_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flowstate_v1_flowstate_proto_goTypes,
		DependencyIndexes: file_flowstate_v1_flowstate_proto_depIdxs,
		EnumInfos:         file_flowstate_v1_flowstate_proto_enumTypes,
		MessageInfos:      file_flowstate_v1_flowstate_proto_msgTypes,
	}.Build()
	File_flowstate_v1_flowstate_proto = out.File
	file_flowstate_v1_flowstate_proto_rawDesc = nil
	file_flowstate_v1_flowstate_proto_goTypes = nil
	file_flowstate_v1_flowstate_proto_depIdxs = nil
}
